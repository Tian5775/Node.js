 Node.js 应用是由以下部分组成的：
1、引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。
2、创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。
3、接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。
例:
var http = require('http');

http.createServer(function (request, response) {

    // 发送 HTTP 头部 
    // HTTP 状态值: 200 : OK
    // 内容类型: text/plain
    response.writeHead(200, {'Content-Type': 'text/plain'});

    // 发送响应数据 "Hello World"
    response.end('Hello World\n');
}).listen(8888);

// 终端打印如下信息
console.log('Server running at http://127.0.0.1:8888/');

NPM是随同NodeJS一起安装的包管理工具
npm install <Module Name>       # 本地安装
npm install <Module Name> -g    # 全局安装
npm list grunt                  #查看所有全局安装的模块
npm uninstall <Module Name>     #卸载 Node.js 模块
npm update <Module Name>        #更新模块
npm ls                          #查看已安装模块列表
npm search <Module Name>        #搜索模块
npm cache clear                 #清空NPM本地缓存
// 设置npm安装程序时的默认位置
npm config set prefix "D:\Program Files\nodejs\X64\node_global"
// 设置npm安装程序时的缓存位置
npm config set cache "D:\Program Files\nodejs\X64\node_cache"
安装配置教程:
http://jingyan.baidu.com/article/91f5db1b2bb6941c7f05e33c.html

Node.js REPLL(交互式解释器) 可以在终端中输入命令，并接收系统的响应。
输入以下命令来启动 Node 的终端：
$ node
可以执行以下任务：
读取 - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中。
执行 - 执行输入的数据结构
打印 - 输出结果
循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。

REPL 命令
ctrl + c - 退出当前终端。
ctrl + c 按下两次 - 退出 Node REPL。
ctrl + d - 退出 Node REPL.
向上/向下 键 - 查看输入的历史命令
tab 键 - 列出当前命令
.help - 列出使用命令
.break - 退出多行表达式
.clear - 退出多行表达式
.save filename - 保存当前的 Node REPL 会话到指定文件
.load filename - 载入当前 Node REPL 会话的文件内容。

Node.js 异步编程的直接体现就是回调。
可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。
Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。

fs.readFile() 是异步函数用于读取文件。

events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。

Buffer 类用来创建一个专门存放二进制数据的缓存区。
一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。
方法 1
创建长度为10字节的 Buffer 实例：
var buf = new Buffer(10);
方法 2
通过给定的数组创建 Buffer 实例：
var buf = new Buffer([10, 20, 30, 40, 50]);
方法 3
通过一个字符串来创建 Buffer 实例：
var buf = new Buffer("www.runoob.com", "utf-8");
utf-8 是默认的编码方式，此外它同样支持以下编码："ascii", "utf8", "utf16le", "ucs2", "base64" 和 "hex"。

Stream 有四种流类型：
Readable - 可读操作。
Writable - 可写操作。
Duplex - 可读可写操作.
Transform - 操作被写入数据，然后读出结果。
所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：
data - 当有数据可读时触发。
end - 没有更多的数据可读时触发。
error - 在接收和写入过程中发生错误时触发。
finish - 所有数据已被写入到底层系统时触发。
var readerStream = fs.createReadStream('input.txt');// 创建一个可读流
var writerStream = fs.createWriteStream('output.txt');// 创建一个可写流
readerStream.pipe(writerStream);// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中
fs.createReadStream('input.txt').pipe(zlib.createGzip()).pipe(fs.createWriteStream('input.txt.gz'));// 压缩 input.txt 文件为 input.txt.gz
fs.createReadStream('input.txt.gz').pipe(zlib.createGunzip()).pipe(fs.createWriteStream('input.txt'));// 解压 input.txt.gz 文件为 input.txt

Node.js 提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。
在以下示例中，hello.js 通过 exports 对象把 world 作为模块的访问接口，在 main.js 中通过 require('./hello') 加载这个模块，然后就可以直接访 问 hello.js 中 exports 对象的成员函数了。
引用'hello.js':
var hello = require('./hello');
hello.world();
hello.js：
exports.world = function() {
  console.log('Hello World');
}
有时候我们只是想把一个对象封装到模块中，格式如下：
module.exports = function() {
  // ...
}
例：
//hello.js 
function Hello() { 
    var name; 
    this.setName = function(thyName) { 
        name = thyName; 
    }; 
    this.sayHello = function() { 
        console.log('Hello ' + name); 
    }; 
}; 
module.exports = Hello;
//main.js 
var Hello = require('./hello'); 
hello = new Hello(); 

require方法接受以下几种参数的传递：
http、fs、path等，原生模块。
./mod或../mod，相对路径的文件模块。
/pathtomodule/mod，绝对路径的文件模块。
mod，非原生模块的文件模块。

__filename表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。
__dirname 表示当前执行脚本所在的目录。
setTimeout(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：setTimeout() 只执行一次指定函数，返回一个代表定时器的句柄值。
console 用于提供控制台标准输出。
console.log 接收若干 个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。
第一个参数是一个字符串，如果没有 参数，只打印一个换行。
console.log('Hello world'); 
console.log('byvoid%diovyb'); 
console.log('byvoid%diovyb', 1991); 

process 是一个全局变量，即 global 对象的属性。
它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。

util.inherits是一个实现对象间原型继承 的函数。Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。
util.inspect是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。
util.isArray(object)如果给定的参数 "object" 是一个数组返回true，否则返回false。
util.isRegExp(object)如果给定的参数 "object" 是一个正则表达式返回true，否则返回false。
util.isDate(object)如果给定的参数 "object" 是一个日期返回true，否则返回false。
util.isError(object)如果给定的参数 "object" 是一个错误对象返回true，否则返回false。

Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。
异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。
建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。
在异步模式下打开文件的语法格式：
fs.open(path, flags[, mode], callback)
以下为通过异步模式获取文件信息的语法格式：
fs.stat(path, callback)
以下为异步模式下写入文件的语法格式：
fs.writeFile(file, data[, options], callback)
以下为异步模式下读取文件的语法格式：
fs.read(fd, buffer, offset, length, position, callback)
以下为异步模式下关闭文件的语法格式：
fs.close(fd, callback)
以下为异步模式下截取文件的语法格式：
fs.ftruncate(fd, len, callback)
以下为删除文件的语法格式：
fs.unlink(path, callback)
以下为创建目录的语法格式：
fs.mkdir(path[, mode], callback)
以下为读取目录的语法格式：
fs.readdir(path, callback)
以下为删除目录的语法格式：
fs.rmdir(path, callback)
具体的参数说明和对象方法请查看:
http://www.runoob.com/nodejs/nodejs-fs.html

由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。
node.js 中 url 模块中的 parse 函数提供了这个功能。
POST 请求的内容全部的都在请求体中，http.ServerRequest 并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。

Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块

安装 Express 并将其保存到依赖列表中：
npm install express --save
以下几个重要的模块是需要与 express 框架一起安装的：
npm install body-parser --save          //body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。
npm install cookie-parser --save        //cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。
npm install multer --save               //multer - node.js 中间件，用于处理 enctype="multipart/form-data"（设置表单的MIME编码）的表单数据。
Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。
路由决定了由谁(指定脚本)去响应客户端请求。在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。
http://www.runoob.com/nodejs/nodejs-express-framework.html

forever
$ npm install forever -g   #安装
$ forever start app.js          #启动
$ forever stop app.js           #关闭
$ forever start -l forever.log -o out.log -e err.log app.js   #输出日志和错误

Node 提供了 child_process 模块来创建子进程，方法有：
exec - child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。
spawn - child_process.spawn 使用指定的命令行参数创建新进程。
fork - child_process.fork 是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork('./son.js') 相当于 spawn('node', ['./son.js']) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。
child.stdin 获取标准输入
child.stdout 获取标准输出
child.stderr 获取标准错误输出